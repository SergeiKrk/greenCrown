---
import { Image } from 'astro:assets'
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
import ChipNotification from '../../ui/ChipNotification.astro'
import Button from '../../ui/Button.astro'
import AvatarGroup from '../../ui/AvatarGroup.astro'

import lugdoroga from '../../../assets/lugdoroga.webp'
import moskvasiti from '../../../assets/moskvasiti.webp'
import derevolev from '../../../assets/derevolev.webp'
import derevopr from '../../../assets/derevopr.webp'
import tuya6 from '../../../assets/tuya6.webp'
import tuya5 from '../../../assets/tuya5.webp'
import tuya4 from '../../../assets/tuya4.webp'
import tuya3 from '../../../assets/tuya3.webp'
import tuya2 from '../../../assets/tuya2.webp'
import tuya1 from '../../../assets/tuya1.webp'
import user1 from '../../../assets/avatars/avatar-01.webp'
import user2 from '../../../assets/avatars/avatar-02.webp'
import user3 from '../../../assets/avatars/avatar-03.webp'

const avatars = [
	{ image: { src: user1.src, alt: 'user name' }, link: '/' },
	{ image: { src: user2.src, alt: 'user name' }, link: '/' },
	{ image: { src: user3.src, alt: 'user name' }, link: '/' }
]
---

<Section id="intro" classes="bg-neutral-50 dark:bg-neutral-900 h-screen grid content-center">
	<Row>
		<Col span="6" align="center">
			<ChipNotification radius="rounded-full" classes="mb-6">
				<strong>300+</strong> довольных клиентов
				<AvatarGroup avatars={avatars} radius="rounded-full" slot="button" />
			</ChipNotification>
			<h1><strong>Служба</strong> ухода за зелеными насаждениями</h1>
			<p class="pb-0 text-lg">Work smarter, not harder, with our innovative platform</p>
			<Button size="lg" link="/">Get started for free</Button>
		</Col>
		<Col span="6">
			<Image
				src={lugdoroga}
				alt="GreenCrown - Уход за зелеными насаждениями"
				class="absolute left-0 top-0 z-20 w-full object-cover"
				style="transition-duration: 0.7s;transition-property: all;transform: translateY(50);"
				id="hero-image"
			/>
			<Image
				src={moskvasiti}
				alt="GreenCrown - Уход за зелеными насаждениями"
				class="absolute left-0 z-10 ml-[15%] w-[70%] object-cover 2xl:bottom-[40%]"
				style="transition-duration: 0.7s;transition-property: all;transform: translateY(50);"
				id="hero-image"
			/>
			<Image
				src={derevolev}
				alt="GreenCrown - Уход за зелеными насаждениями"
				width="200"
				class="invisible absolute left-0 z-30 2xl:visible 2xl:bottom-[50%] 2xl:-ml-[10%]"
				style="transition-duration: 0.7s;transition-property: all;transform: translateY(50);"
				id="hero-image"
			/>
			<Image
				src={derevopr}
				alt="GreenCrown - Уход за зелеными насаждениями"
				class="-mr-[%] absolute right-0 z-30 w-[40%] 2xl:bottom-[35%]"
				style="transition-duration: 0.7s;transition-property: all;transform: translateY(50);"
				id="hero-image"
			/>
		</Col>
	</Row>
</Section>

<script>
	// Функция дебаунсинга
	function debounce(this: any, func: (...args: any[]) => void, wait: number) {
		let timeout: NodeJS.Timeout | undefined
		return function (this: any, ...args: any[]) {
			clearTimeout(timeout)
			timeout = setTimeout(() => func.apply(this, args), wait)
		}
	}

	// Основная функция обработки прокрутки
	const handleScroll = debounce(function () {
		let scrollTop = window.scrollY || document.documentElement.scrollTop
		console.log('Прокрутка:', scrollTop)

		// Находим элемент изображения
		const heroImage = document.getElementById('hero-image')
		if (heroImage) {
			// Изменяем значение translateY пропорционально десятой части scrollTop
			heroImage.style.transform = `translateY(${scrollTop * 0.2}px)`
		}
	}, 50)

	// Функция, которая следит за видимостью элемента
	function handleIntersection(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				// Если элемент виден, добавляем обработчик прокрутки
				window.addEventListener('scroll', handleScroll)
			} else {
				// Если элемент не виден, удаляем обработчик прокрутки
				window.removeEventListener('scroll', handleScroll)
			}
		})
	}

	// Создаем наблюдателя за видимостью элемента
	const observer = new IntersectionObserver(handleIntersection, {
		root: null, // отслеживаем относительно видимой области
		threshold: 0 // элемент считается видимым, если хотя бы частично попадает в зону видимости
	})

	// Находим элемент и начинаем за ним следить
	const target = document.getElementById('intro')
	if (target) {
		observer.observe(target)
	}
</script>
