---
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
import ChipNotification from '../../ui/ChipNotification.astro'
import AvatarGroup from '../../ui/AvatarGroup.astro'

import lugdoroga from '../../../assets/lugdoroga.webp'
import moskvasiti from '../../../assets/moskvasiti.webp'
import derevolev from '../../../assets/derevolev.webp'
import derevopr from '../../../assets/derevopr.webp'
import obrabotchiki from '../../../assets/holodnyj-tuman.webp'
import user1 from '../../../assets/avatars/avatar-01.webp'
import user2 from '../../../assets/avatars/avatar-02.webp'
import user3 from '../../../assets/avatars/avatar-03.webp'
import HeroDynamicScroll from '../../HeroDynamicScroll'
import BgGradient from '../bg/BgGradient.astro'

const avatars = [
	{ image: { src: user1.src, alt: 'user name' }, link: '/' },
	{ image: { src: user2.src, alt: 'user name' }, link: '/' },
	{ image: { src: user3.src, alt: 'user name' }, link: '/' }
]
---

<Section id="intro" classes="bg-neutral-50 dark:bg-neutral-900 h-screen grid content-center">
	<BgGradient />
	<Row>
		<Col span="6" align="center">
			<ChipNotification radius="rounded-full" classes="mb-6">
				<strong>300+</strong> довольных клиентов
				<AvatarGroup avatars={avatars} radius="rounded-full" slot="button" />
			</ChipNotification>
			<h1><strong>Служба</strong> ухода за зелеными насаждениями</h1>
			<p class="pb-0 text-lg">Лечение деревьев, защита от вредителей, озеленение и уход</p>

			<!-- Open the modal using ID.showModal() method -->
			<button class="btn bg-primary-500 text-white" onclick="my_modal_2.showModal()"
				>Заказать консультацию</button
			>
			<dialog id="my_modal_2" class="modal">
				<div class="modal-box">
					<h3 class="text-lg font-bold">Hello!</h3>
					<div class="join">
						<input
							class="input join-item input-bordered input-accent w-44 border-primary-500"
							placeholder="Имя"
						/>
						<input
							class="input join-item input-bordered input-accent w-44 border-primary-500"
							placeholder="Телефон"
						/>
						<button
							class="btn join-item rounded-r-full border-primary-500 bg-primary-500 text-white"
							>Subscribe</button
						>
					</div>
				</div>
				<form method="dialog" class="modal-backdrop">
					<button>закрыть</button>
				</form>
			</dialog>
		</Col>
		<Col span="6">
			<HeroDynamicScroll
				lugdoroga={lugdoroga}
				moskvasiti={moskvasiti}
				derevolev={derevolev}
				derevopr={derevopr}
				obrabotchiki={obrabotchiki}
				client:load
			/>
		</Col>
	</Row>
</Section>

<script>
	// Функция дебаунсинга
	function debounce(this: any, func: (...args: any[]) => void, wait: number) {
		let timeout: NodeJS.Timeout | undefined
		return function (this: any, ...args: any[]) {
			clearTimeout(timeout)
			timeout = setTimeout(() => func.apply(this, args), wait)
		}
	}

	// Основная функция обработки прокрутки
	const handleScroll = debounce(function () {
		let scrollTop = window.scrollY || document.documentElement.scrollTop
		console.log('Прокрутка:', scrollTop)

		// Находим элемент изображения
		const heroImage = document.getElementById('hero-image')
		if (heroImage) {
			// Изменяем значение translateY пропорционально десятой части scrollTop
			heroImage.style.transform = `translateY(${scrollTop * 0.2}px)`
		}
	}, 50)

	// Функция, которая следит за видимостью элемента
	function handleIntersection(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				// Если элемент виден, добавляем обработчик прокрутки
				window.addEventListener('scroll', handleScroll)
			} else {
				// Если элемент не виден, удаляем обработчик прокрутки
				window.removeEventListener('scroll', handleScroll)
			}
		})
	}

	// Создаем наблюдателя за видимостью элемента
	const observer = new IntersectionObserver(handleIntersection, {
		root: null, // отслеживаем относительно видимой области
		threshold: 0 // элемент считается видимым, если хотя бы частично попадает в зону видимости
	})

	// Находим элемент и начинаем за ним следить
	const target = document.getElementById('intro')
	if (target) {
		observer.observe(target)
	}
</script>
